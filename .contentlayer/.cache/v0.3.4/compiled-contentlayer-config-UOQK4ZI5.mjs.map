{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import remarkGfm from \"remark-gfm\"\r\nimport rehypePrettyCode, { Options } from \"rehype-pretty-code\"\r\nimport { defineDocumentType, makeSource, ComputedFields } from \"contentlayer/source-files\"\r\n\r\n/** @type {import('contentlayer/source-files').ComputedFields} */\r\nconst computedFields: ComputedFields = {\r\n  slug: {\r\n    type: \"string\",\r\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: \"string\",\r\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n  },\r\n}\r\n\r\nexport const Page = defineDocumentType(() => ({\r\n  name: \"Page\",\r\n  filePathPattern: `pages/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: `posts/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: {\r\n      type: \"string\",\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: \"string\",\r\n    },\r\n    date: {\r\n      type: \"date\",\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields,\r\n}))\r\nconst rehypePlugins: [Plugin<[Options?]>] = [\r\n  [rehypePrettyCode, {}],\r\n  // Other plugins can be added here\r\n];\r\n\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./content\",\r\n  documentTypes: [Post, Page],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [([rehypePrettyCode] as any),\r\n    {\r\n      theme: 'github-dark',\r\n      onVisitLine(node: any) {\r\n        // Prevent lines from collapsing in 'display: grid' mode and allow empty\r\n        //line to be copy/pasted\r\n        if (node.children.length === 0) {\r\n          node.children = [{ type: 'text', value: ' ' }]\r\n        }\r\n      }\r\n    }]\r\n  }\r\n})\r\n"],
  "mappings": ";AAAA,OAAO,eAAe;AACtB,OAAO,sBAAmC;AAC1C,SAAS,oBAAoB,kBAAkC;AAG/D,IAAM,iBAAiC;AAAA,EACrC,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AACF;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,IACR;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAOF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,IAAI;AAAA,EAC1B,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MAAE,CAAC,gBAAgB;AAAA,MAClC;AAAA,QACE,OAAO;AAAA,QACP,YAAY,MAAW;AAGrB,cAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,iBAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,UAC/C;AAAA,QACF;AAAA,MACF;AAAA,IAAC;AAAA,EACH;AACF,CAAC;",
  "names": []
}
